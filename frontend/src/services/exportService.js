import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const exportService = {
  // Export as PDF
  exportToPDF: async (transcription, fileName = 'transcription') => {
    try {
      // Create a temporary div for rendering
      const element = document.createElement('div');
      element.style.position = 'absolute';
      element.style.left = '-9999px';
      element.style.width = '600px';
      element.style.padding = '20px';
      element.style.backgroundColor = 'white';
      element.style.fontFamily = 'Arial, sans-serif';
      
      element.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
          <h1 style="color: #2c3e50; margin-bottom: 5px;">LegalEase Transcription</h1>
          <p style="color: #7f8c8d; margin: 0;">Generated on ${new Date().toLocaleDateString()}</p>
        </div>
        
        <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
          <h3 style="color: #2c3e50; margin-bottom: 10px;">Document Details</h3>
          <p style="margin: 5px 0;"><strong>Language:</strong> ${transcription.language.toUpperCase()}</p>
          <p style="margin: 5px 0;"><strong>Created:</strong> ${new Date(transcription.createdAt).toLocaleString()}</p>
          <p style="margin: 5px 0;"><strong>Status:</strong> ${transcription.status}</p>
        </div>
        
        <div>
          <h3 style="color: #2c3e50; margin-bottom: 10px;">Transcription Content</h3>
          <div style="padding: 15px; background: white; border: 1px solid #e1e8ed; border-radius: 8px; line-height: 1.6;">
            ${transcription.transcribedText || 'No transcription content available'}
          </div>
        </div>
        
        <div style="margin-top: 30px; text-align: center; color: #7f8c8d; font-size: 12px;">
          Generated by LegalEase - Voice-based Legal Form Assistant
        </div>
      `;

      document.body.appendChild(element);

      const canvas = await html2canvas(element);
      const imgData = canvas.toDataURL('image/png');
      
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      pdf.save(`${fileName}.pdf`);

      // Clean up
      document.body.removeChild(element);

      return true;
    } catch (error) {
      console.error('PDF export error:', error);
      throw new Error('Failed to generate PDF');
    }
  },

  // Export as Text file
  exportToTXT: (transcription, fileName = 'transcription') => {
    try {
      const content = `
LEGALEASE TRANSCRIPTION
=======================

Generated: ${new Date().toLocaleDateString()}
Language: ${transcription.language.toUpperCase()}
Created: ${new Date(transcription.createdAt).toLocaleString()}
Status: ${transcription.status}

TRANSCRIPTION CONTENT
=====================

${transcription.transcribedText || 'No transcription content available'}

---
Generated by LegalEase - Voice-based Legal Form Assistant
      `.trim();

      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${fileName}.txt`;
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      return true;
    } catch (error) {
      console.error('TXT export error:', error);
      throw new Error('Failed to generate text file');
    }
  },

  // Export as Word-like document (HTML)
  exportToDOC: (transcription, fileName = 'transcription') => {
    try {
      const content = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>LegalEase Transcription</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 30px; }
        .details { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .content { padding: 20px; border: 1px solid #e1e8ed; border-radius: 8px; }
        .footer { text-align: center; margin-top: 40px; color: #7f8c8d; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>LegalEase Transcription</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
    </div>
    
    <div class="details">
        <h3>Document Details</h3>
        <p><strong>Language:</strong> ${transcription.language.toUpperCase()}</p>
        <p><strong>Created:</strong> ${new Date(transcription.createdAt).toLocaleString()}</p>
        <p><strong>Status:</strong> ${transcription.status}</p>
    </div>
    
    <div class="content">
        <h3>Transcription Content</h3>
        <p>${transcription.transcribedText || 'No transcription content available'}</p>
    </div>
    
    <div class="footer">
        Generated by LegalEase - Voice-based Legal Form Assistant
    </div>
</body>
</html>
      `.trim();

      const blob = new Blob([content], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${fileName}.html`;
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      return true;
    } catch (error) {
      console.error('DOC export error:', error);
      throw new Error('Failed to generate document');
    }
  }
};